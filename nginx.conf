user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
	worker_connections 768;
	# multi_accept on;
}

http {

	##
	# Basic Settings
	##

	sendfile on;
	tcp_nopush on;
	types_hash_max_size 2048;
	# server_tokens off;

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	##
	# SSL Settings
	##

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE
	ssl_prefer_server_ciphers on;

	##
	# Logging Settings
	##

	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;

	##
	# Gzip Settings
	##

	gzip on;

	# gzip_vary on;
	# gzip_proxied any;
	# gzip_comp_level 6;
	# gzip_buffers 16 8k;
	# gzip_http_version 1.1;
	# gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

	##
	# Virtual Host Configs
	##

	upstream rails {
		# pumaの設定で指定したsocketファイルを指定
		server unix:///var/www/tmp/rails/socket/puma.sock;
	}

	upstream express_conf {
		server express:3100;
	}

	upstream spring {
		server localhost:8080;
	}

	server{
		listen 443;
		ssl on;
		server_name server.akiumi.net;
		ssl_certificate /etc/nginx/certs/server.akiumi.net.crt;
		ssl_certificate_key /etc/nginx/certs/server.akiumi.net.key;

		try_files $uri/index.html $uri.html $uri;

		location /rails/ {
			# CORS headers
			if ($request_method = 'OPTIONS') {
				add_header 'Access-Control-Allow-Origin' "$http_origin";
				# add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
				add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, x-csrf-token';
				# add_header 'Access-Control-Max-Age' 1728000;
				add_header 'Content-Type' 'text/plain; charset=utf-8';
				# add_header 'Content-Length' 0;
				return 204;
			}
			# add_header 'Access-Control-Allow-Origin' "$http_origin";
			# add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
			# add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, x-csrf-token';

			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;
			proxy_set_header Host $http_host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header Client-IP $remote_addr;
			proxy_redirect   off;
			proxy_pass       http://rails;
		}

		location /express/ {
	    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header Host $http_host;
			proxy_redirect   off;
	    proxy_pass       http://express_conf;
		}

		location /spring/ {
	    proxy_set_header   X-Forwarded-Proto $scheme;
	    proxy_set_header   Host              $http_host;
	    proxy_set_header   Host              $host;
	    proxy_set_header   X-Real-IP         $remote_addr;
	    proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
			proxy_http_version 1.1;
	    proxy_pass         http://spring;
		}
	}
	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;

}
